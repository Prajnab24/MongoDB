Mongo DB is a documnet based DB 
Stores JSON data format called BSON
A record in MongoDB is a document, which is a data structure composed of key value pairs similar to the structure of JSON objects.

Document example
{
	title: "Post Title 1",
	body: "Body of post.",
	category: "News",
	likes: 1,
	tags: ["news", "events"],
	date: Date()
}

non -relational database
MongoDB stores data in flexible documents. Instead of having multiple tables you can simply keep all of your related data together. This makes reading your data very fast.
You can still have multiple groups of data too. In MongoDB, instead of tables these are called collections.

Mongo DB atlas , Mongo community server , Mongo DB shell


mongosh "mongodb+srv://cluster0.ex4ht.mongodb.net/myFirstDatabase" --apiVersion 1 --username YOUR_USER_NAM

> use blogs
> db.craeteCollections("posts")
>db.posts.insertOne({
  title: "Post Title 1",
  body: "Body of post.",
  category: "News",
  likes: 1,
  tags: ["news", "events"],
  date: Date()
})

If you try to insert documents into a collection that does not exist, MongoDB will create the collection automatically

>db.posts.insertMany([  
  {
    title: "Post Title 2",
    body: "Body of post.",
    category: "Event",
    likes: 2,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 3",
    body: "Body of post.",
    category: "Technology",
    likes: 3,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 4",
    body: "Body of post.",
    category: "Event",
    likes: 4,
    tags: ["news", "events"],
    date: Date()
  }
])

>db.posts.find()
>db.posts.findOne()
>db.posts.find().limit(2)
>db.posts.findOne({},{likes:1}).sort({likes:1})
>db.posts.find( {category: "News"} )
>db.posts.find({}, {title: 1, date: 1})
>db.posts.find({}, {_id: 0, title: 1, date: 1})

You cannot use both 0 and 1 in the same object. The only exception is the _id field. You should either specify the fields you would like to include or the fields you would like to exclude.
>db.posts.find({}, {title: 1, date: 1})

>db.posts.updateOne( { title: "Post Title 1" }, { $set: { likes: 2 } } ) 

db.posts.updateOne( 
  { title: "Post Title 5" }, 
  {
    $set: 
      {
        title: "Post Title 5",
        body: "Body of post.",
        category: "Event",
        likes: 5,
        tags: ["news", "events"],
        date: Date()
      }
  }, 
  { upsert: true }
)

upsert inserts if document not found

db.posts.updateMany({}, { $inc: { likes: 1 } })

>db.posts.deleteOne({ title: "Post Title 5" })
>db.posts.deleteMany({ category: "Technology" })

Query operators

    $eq: Values are equal
    $ne: Values are not equal
    $gt: Value is greater than another value
    $gte: Value is greater than or equal to another value
    $lt: Value is less than another value
    $lte: Value is less than or equal to another value
    $in: Value is matched within an array


    $and: Returns documents where both queries match
    $or: Returns documents where either query matches
    $nor: Returns documents where both queries fail to match
    $not: Returns documents where the query does not match


    $regex: Allows the use of regular expressions when evaluating field values
    $text: Performs a text search
    $where: Uses a JavaScript expression to match documents

Update operators
    $currentDate: Sets the field value to the current date
    $inc: Increments the field value
    $rename: Renames the field
    $set: Sets the value of a field
    $unset: Removes the field from the document


    $addToSet: Adds distinct elements to an array
    $pop: Removes the first or last element of an array
    $pull: Removes all elements from an array that match the query
    $push: Adds an element to an array

Aggregation operations allow you to group, sort, perform calculations, analyze data, and much more.
db.posts.aggregate([
  // Stage 1: Only find documents that have more than 1 like
  {
    $match: { likes: { $gt: 1 } }
  },
  // Stage 2: Group documents by category and sum each categories likes
  {
    $group: { _id: "$category", totalLikes: { $sum: "$likes" } }
  }
]
)

db.listingsAndReviews.aggregate(
    [ { $group : { _id : "$property_type" } } ]
)

db.movies.aggregate([ { $limit: 1 } ])

Filters for these fields
>db.restaurants.aggregate([
  {
    $project: {
      "name": 1,
      "cuisine": 1,
      "address": 1
    }
  },
  {
    $limit: 5
  }
])

>db.listingsAndReviews.aggregate([ 
  { 
    $sort: { "accommodates": -1 } 
  },
  {
    $project: {
      "name": 1,
      "accommodates": 1
    }
  },
  {
    $limit: 5
  }
])
Match
db.listingsAndReviews.aggregate([ 
  { $match : { property_type : "House" } },
  { $limit: 2 },
  { $project: {
    "name": 1,
    "bedrooms": 1,
    "price": 1
  }}
])
AddFields
db.restaurants.aggregate([
  {
    $addFields: {
      avgGrade: { $avg: "$grades.score" }
    }
  },
  {
    $project: {
      "name": 1,
      "avgGrade": 1
    }
  },
  {
    $limit: 5
  }
])
count
db.restaurants.aggregate([
  {
    $match: { "cuisine": "Chinese" }
  },
  {
    $count: "totalChinese"
  }
]

Lookup
db.comments.aggregate([
  {
    $lookup: {
      from: "movies",
      localField: "movie_id",
      foreignField: "_id",
      as: "movie_details",
    },
  },
  {
    $limit: 1
  }
])

Search index
db.movies.aggregate([
  {
    $search: {
      index: "default", // optional unless you named your index something other than "default"
      text: {
        query: "star wars",
        path: "title"
      },
    },
  },
  {
    $project: {
      title: 1,
      year: 1,
    }
  }
])

